# -*- coding: utf-8 -*-
"""ED_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bdqt3L11tWB1GmW5ntVAe9ppzTgOqZDM
"""

import numpy as np
import matplotlib.pyplot as plt

#parametros iniciales
dx = 0.2
x0 = 0
y0 = 1
xmax = 2
#parametros 

def f(x,y):
  return (y**2)*np.exp(-x)

Data = np.array([[0,x0,y0,f(x0,y0)]])
total_points = int(np.ceil(xmax/dx))


for k in range(total_points):
  xk = Data[k,1]
  yk = Data[k,2]
  ynext = yk + dx*f(xk,yk)
  xnext = xk+dx

  Data = np.concatenate((Data, np.array([[k+1, xnext, ynext,f(xnext, ynext)]])))


fig = plt.figure(1)
fig.clf()
ax =fig.add_subplot(1,1,1)
ax.plot(Data[:,1], Data[:,2], lw =2, ls ='-', marker='.', ms=8, label='dx = 0.2')
ax.legend()
ax.grid(True)
ax.set_xlabel('x')
ax.set_ylabel('y')

import numpy as np
import matplotlib.pyplot as plt

### ----- Parámetros ----
dx_list = [0.2,0.1,0.05,0.01]
x0 = 0
y0 = 1
xmax = 2
##-----------------------
def f(x,y):
    return (y**2)*np.exp(-x)

### -- Método de Euler
Data_all = []
for dx in dx_list:
    Data = np.array([[0,x0,y0,f(x0,y0)]])
    total_points = int(np.ceil(xmax/dx))
    for k in range(total_points):
        xk = Data[k,1]
        yk = Data[k,2]
        ##------------------------
        xnext = xk + dx
        ynext = yk + dx*f(xk,yk)
        ##------------------------
        Data = np.concatenate((Data,np.array([[k+1,xnext,ynext,f(xnext,ynext)]])))
        ##------------------------
    Data_all.append(Data)
##--- Graficación
fig = plt.figure(1)
fig.clf()
ax = fig.add_subplot(1,1,1)
for k in range(len(Data_all)):
    Data = Data_all[k]
    ax.plot(Data[:,1],Data[:,2],lw=2,ls='-',marker='.',ms=8,
            label=r'$\Delta$'+'x = '+ str(dx_list[k]))
ax.legend()
ax.grid(True)
ax.set_xlabel('x')
ax.set_ylabel('y')

"""**runge KUTTA
**
"""

import numpy as np
x0 = 1
y0 = 1
dx=0.1
points = 15

xk = x0
yk = y0
def f(x,y):
  return 2*x*y

Data_RK = np.array([[xk,yk]])
for k in range(points):
  k1 = dx*f(xk,yk)
  k2 = dx*f(xk+0.5*dx,yk+0.5*k1)
  k3 = dx*f(xk+0.5*dx,yk+0.5*k2)
  k4 = dx*f(xk+dx,yk+k3)
  yk = yk + (1/6)*(k1+2*k2+2*k3+k4)
  xk = xk + dx

  data2add = np.array([[xk,yk]])
  Data_RK = np.concatenate((Data_RK, data2add), axis=0)

"""SISTEMA DE ECUACIONES"""

def f1(t, x1, x2):
  return x2

def f2(t, x1, x2):
  return 4*x2-5*x1

t0 = 0
x1_0 = 3
x2_0 = -5
dt = 0.1
x1_1 = x1_0 + dt*f1(t0,x1_0, x2_0) 
x2_1 = x2_0 + dt*f2(t0,x1_0,x2_0)
Data = [t0,x1_0, x2_0; t1, x1_1, x2_1]

t2  = t1 +dt
x1_2 = x1_1 + dt*f1(t1,x1_1, x2_1) 
x2_2 = x2_1 + dt*f2(t1,x1_1,x2_1)

t3 = t2 + dt
x1_3 = x1_2 + dt*f1(t2,x1_2, x2_2) 
x2_3 = x2_2 + dt*f2(t2,x1_2, x2_2)